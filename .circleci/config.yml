version: 2.1

commands:
  destroy-environment:
      description: delete stacks on failure
      parameters:
        workflow-id:
          type: string
          default: "{CIRCLE_WORKFLOW_ID:0:7}"
      steps:
        - run:
            name: Destroy Environment
            when: on_fail
            command: |
              aws cloudformation delete-stack \
                --stack-name udapeople-backend-<< parameters.workflow-id >> \
                --region us-east-1
              aws s3 rm s3://udapeople-<< parameters.workflow-id >> --recursive
              aws cloudformation delete-stack \
                --stack-name udapeople-frontend-<< parameters.workflow-id >> \
                --region us-east-1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze for security vulnerability in frontend
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze for security vulnerability in backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: install tar and gzip
            command: |
              yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=cloud-based-dipo \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=cfcife \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              echo $(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text) >> ~/project/.circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment:
            workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.16
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints:
              - "4d:f6:35:64:c2:64:4e:5f:8f:82:c9:d0:06:b6:60:6f"
        - run:
            name: Install dependencies
            command: |
              apk add --update --no-cache tar gzip curl ansible aws-cli
        - attach_workspace:
            at: ~/
        - run:
            name: Configure server
            command: |
              # add environment variables to server
              echo NODE_ENV=production > ~/project/backend/.env
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
              echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
              cat ~/project/backend/.env
              cd ~/project/.circleci/ansible/
              ansible-playbook -i inventory.txt configure-server.yml
        - persist_to_workspace:
            root: ~/
            paths:
              - project/backend
        - destroy-environment:
            workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [test-frontend]
      # - scan-backend:
      #     requires: [test-backend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

  